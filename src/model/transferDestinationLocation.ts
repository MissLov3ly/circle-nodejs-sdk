/**
 * Core Functionality
 * APIs for managing your account balance. These endpoints are available with all Circle APIs.
 *
 * The version of the OpenAPI document: ${version}
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Chain } from './chain';
import { TransferDestinationBlockchainLocation } from './transferDestinationBlockchainLocation';
import { TransferDestinationWalletLocation } from './transferDestinationWalletLocation';

/**
* A destination of funds.
*/
export class TransferDestinationLocation {
    'type': TransferDestinationLocation.TypeEnum;
    /**
    * An alphanumeric string which indicates the wallet address used to receive the transfer. Will only be set when the transfer source is a blockchain address.
    */
    'address': string;
    /**
    * The secondary identifier for a blockchain address. An example of this is the memo field on the Stellar network, which can be text, id, or hash format.
    */
    'addressTag'?: string | null;
    'chain': Chain;
    /**
    * The id of the wallet.
    */
    'id': string;

    static discriminator: string | undefined = "type";

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "TransferDestinationLocation.TypeEnum"
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "string"
        },
        {
            "name": "addressTag",
            "baseName": "addressTag",
            "type": "string"
        },
        {
            "name": "chain",
            "baseName": "chain",
            "type": "Chain"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TransferDestinationLocation.attributeTypeMap;
    }
}

export namespace TransferDestinationLocation {
    export enum TypeEnum {
        Wallet = <any> 'wallet'
    }
}
